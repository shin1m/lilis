(define-macro while (test . body)
  (define loop (gensym))
  `(begin
    (define ,loop (lambda () (if ,test (begin ,@body (,loop)))))
    (,loop)
  )
)
(import peano)
(import assert)
((lambda ()
  (define x ())
  (define y ())
  (while (> '(x x x) x)
    (set! y (cons 'y y))
    (set! x (cons 'x x))
  )
  (print-assert-equal y '(y y y))
))
(define-macro for (initialize test next . body)
  `(begin
    ,initialize
    (while ,test ,@body ,next)
  )
)
((lambda ()
  (define y ())
  (for (define x ()) (> '(x x x) x) (set! x (cons 'x x))
    (set! y (cons 'y y))
  )
  (print-assert-equal x '(x x x))
  (print-assert-equal y '(y y y))
))
(define-macro for-step (i step . body)
  `(for
    (define ,i ,(car step))
    (> ,(car (cdr step)) ,i)
    (set! ,i (cons 'x ,i))
    ,@body
  )
)
((lambda ()
  (define y ())
  (for-step x (() '(x x x))
    (set! y (cons 'y y))
  )
  (print-assert-equal x '(x x x))
  (print-assert-equal y '(y y y))
))
