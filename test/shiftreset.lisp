(define reset (lambda (thunk)
  (call-with-prompt 'for-reset/shift (lambda (k thunk) (thunk k)) thunk)
))
(define shift (lambda (thunk)
  (abort-to-prompt 'for-reset/shift thunk)
))
(define + (lambda (x y) (if x (cons (car x) (+ (cdr x) y)) y)))
(define * (lambda (x y) (if x (+ y (* (cdr x) y)) ())))
(print '(* () ()) (* () ()))
(print '(* '(x) ()) (* '(x) ()))
(print '(* '(x) '(x)) (* '(x) '(x)))
(print '(* '(x x) '(x)) (* '(x x) '(x)))
(print '(* '(x x) '(x x)) (* '(x x) '(x x)))
(print (reset (lambda ()
  (shift (lambda (k) (k '(x x x x x))))
)))
(print ((lambda () (reset (lambda ()
  (shift (lambda (k) (k '(x x x x x))))
)))))
(print (* '(x x) (reset (lambda ()
  (+ '(x) (shift (lambda (k) (k '(x x x x x)))))
))))
(print (reset (lambda ()
  (* '(x x) (shift (lambda (k) (k (k '(x x x x))))))
)))
(print (+ '(x) (reset (lambda ()
  (* '(x x) (shift (lambda (k) (k (k '(x x x x))))))
))))
