(import shiftreset)
(import boolean)
(import assert)
(print-assert-equal (reset (lambda ()
  (shift (lambda (k) (cons '(x) (k ()))))
  ()
)) '((x)))
(print-assert-equal (reset (lambda ()
  (shift (lambda (k) (cons '(x) (k ()))))
  (shift (lambda (k) (cons '(x x) (k ()))))
  ()
)) '((x) (x x)))
((lambda ()
  (define yield (lambda (x)
    (shift (lambda (k) (cons x (k ()))))
  ))
  (print-assert-equal (reset (lambda ()
    (yield '(x))
    (yield '(x x))
    (yield '(x x x))
    ()
  )) '((x) (x x) (x x x)))
))
((lambda ()
  (define test-x-xx-xxx (lambda (xs)
    (assert xs)
    (print-assert-equal (car xs) '(x))
    (set! xs ((cdr xs)))
    (assert xs)
    (print-assert-equal (car xs) '(x x))
    (set! xs ((cdr xs)))
    (assert xs)
    (print-assert-equal (car xs) '(x x x))
    (set! xs ((cdr xs)))
    (assert (not xs))
  ))
  (define for-each (lambda (xs f) (if xs ((lambda ()
    (f (car xs))
    (for-each (cdr xs) f)
  )))))
  (define yield (lambda (x)
    (shift (lambda (k) (cons x (lambda () (k ())))))
  ))
  ((lambda ()
    (test-x-xx-xxx (reset (lambda ()
      (yield '(x))
      (yield '(x x))
      (yield '(x x x))
    )))
  ))
  ((lambda ()
    (define list->lazy (lambda (xs)
      (reset (lambda () (for-each xs yield)))
    ))
    (test-x-xx-xxx (list->lazy '((x) (x x) (x x x))))
  ))
  ((lambda ()
    (define for-each->lazy (lambda (xs) (reset (lambda ()
      (for-each xs (lambda (x)
        (shift (lambda (k) (cons x (lambda () (k ())))))
      ))
    ))))
    (test-x-xx-xxx (for-each->lazy '((x) (x x) (x x x))))
  ))
))
