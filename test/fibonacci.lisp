(define + (lambda (x y) (if x (cons (car x) (+ (cdr x) y)) y)))
(define - (lambda (x y) (if y (- (cdr x) (cdr y)) x)))
(define > (lambda (x y) (if x (if y (> (cdr x) (cdr y)) 't))))
(print '(+ () ()) (+ () ()))
(print '(+ '(x) ()) (+ '(x) ()))
(print '(+ () '(x)) (+ () '(x)))
(print '(+ '(x) '(x)) (+ '(x) '(x)))
(print '(> () ()) (> () ()))
(print '(> '(x) ()) (> '(x) ()))
(print '(> () '(x)) (> () '(x)))
(print '(> '(x) '(x)) (> '(x) '(x)))
(print '(> '(x x) '(x)) (> '(x x) '(x)))
((lambda ()
  (define fibonacci (lambda (n) (if (> n '(x))
    (+ (fibonacci (- n '(x))) (fibonacci (- n '(x x))))
    '(x)
  )))
  (define fibonaccis (lambda (n)
    (if (> n ()) (fibonaccis (- n '(x))))
    (print (fibonacci n))
  ))
  (fibonaccis '(x x x x x x x x))
))
